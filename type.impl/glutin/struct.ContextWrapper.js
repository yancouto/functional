(function() {var type_impls = {
"glutin":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextWrapper%3CPossiblyCurrent,+W%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#104-165\">source</a><a href=\"#impl-ContextWrapper%3CPossiblyCurrent,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"struct\" href=\"glutin/struct.PossiblyCurrent.html\" title=\"struct glutin::PossiblyCurrent\">PossiblyCurrent</a>, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_buffers\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#114-116\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.swap_buffers\" class=\"fn\">swap_buffers</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"glutin/enum.ContextError.html\" title=\"enum glutin::ContextError\">ContextError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the buffers in case of double or triple buffering.</p>\n<p>You should call this function every time you have finished rendering, or\nthe image may not be displayed on the screen.</p>\n<p><strong>Warning</strong>: if you enabled vsync, this function will block until the\nnext time the screen is refreshed. However drivers can choose to\noverride your vsync settings, which means that you can’t know in\nadvance whether <code>swap_buffers()</code> will block or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_buffers_with_damage\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#128-130\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.swap_buffers_with_damage\" class=\"fn\">swap_buffers_with_damage</a>(\n    &amp;self,\n    rects: &amp;[<a class=\"struct\" href=\"glutin/struct.Rect.html\" title=\"struct glutin::Rect\">Rect</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"glutin/enum.ContextError.html\" title=\"enum glutin::ContextError\">ContextError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the buffers in case of double or triple buffering using specified\ndamage rects.</p>\n<p>You should call this function every time you have finished rendering, or\nthe image may not be displayed on the screen.</p>\n<p><strong>Warning</strong>: if you enabled vsync, this function will block until the\nnext time the screen is refreshed. However drivers can choose to\noverride your vsync settings, which means that you can’t know in\nadvance whether <code>swap_buffers_with_damage()</code> will block or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_buffers_with_damage_supported\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#135-137\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.swap_buffers_with_damage_supported\" class=\"fn\">swap_buffers_with_damage_supported</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether or not swap_buffer_with_damage is available. If this\nfunction returns false, any call to swap_buffers_with_damage will\nreturn an error.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_pixel_format\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#140-142\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.get_pixel_format\" class=\"fn\">get_pixel_format</a>(&amp;self) -&gt; <a class=\"struct\" href=\"glutin/struct.PixelFormat.html\" title=\"struct glutin::PixelFormat\">PixelFormat</a></h4></section></summary><div class=\"docblock\"><p>Returns the pixel format of the main framebuffer of the context.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#153-156\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;self, size: <a class=\"struct\" href=\"glutin/dpi/struct.PhysicalSize.html\" title=\"struct glutin::dpi::PhysicalSize\">PhysicalSize</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Resize the context.</p>\n<p>Some platforms (macOS, Wayland) require being manually updated when\ntheir window or surface is resized.</p>\n<p>The easiest way of doing this is to take every <a href=\"glutin/event/enum.WindowEvent.html#variant.Resized\" title=\"variant glutin::event::WindowEvent::Resized\"><code>WindowEvent::Resized</code></a>\nthat is received and pass its <a href=\"glutin/dpi/struct.PhysicalSize.html\" title=\"struct glutin::dpi::PhysicalSize\"><code>dpi::PhysicalSize</code></a> into this function.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.buffer_age\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#162-164\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.buffer_age\" class=\"fn\">buffer_age</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Query the underlying surface back’s buffer age.</p>\n<p>Return <code>n</code> is the number of frames elapsed since it was most recently\ndrawn.</p>\n</div></details></div></details>",0,"glutin::windowed::WindowedContext","glutin::windowed::RawContext"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextWrapper%3CPossiblyCurrent,+W%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#287-293\">source</a><a href=\"#impl-ContextWrapper%3CPossiblyCurrent,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"struct\" href=\"glutin/struct.PossiblyCurrent.html\" title=\"struct glutin::PossiblyCurrent\">PossiblyCurrent</a>, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_proc_address\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#290-292\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.get_proc_address\" class=\"fn\">get_proc_address</a>(&amp;self, addr: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a></h4></section></summary><div class=\"docblock\"><p>Returns the address of an OpenGL function.</p>\n</div></details></div></details>",0,"glutin::windowed::WindowedContext","glutin::windowed::RawContext"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextWrapper%3CT,+W%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#167-285\">source</a><a href=\"#impl-ContextWrapper%3CT,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"glutin/trait.ContextCurrentState.html\" title=\"trait glutin::ContextCurrentState\">ContextCurrentState</a>, W&gt; <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;T, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#169-171\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.context\" class=\"fn\">context</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"glutin/struct.Context.html\" title=\"struct glutin::Context\">Context</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Borrow the inner GL <a href=\"glutin/struct.Context.html\" title=\"struct glutin::Context\"><code>Context</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_current\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#227-235\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.make_current\" class=\"fn\">make_current</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"struct\" href=\"glutin/struct.PossiblyCurrent.html\" title=\"struct glutin::PossiblyCurrent\">PossiblyCurrent</a>, W&gt;, (Self, <a class=\"enum\" href=\"glutin/enum.ContextError.html\" title=\"enum glutin::ContextError\">ContextError</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Sets this context as the current context. The previously current context\n(if any) is no longer current.</p>\n<p>A failed call to <code>make_current</code> might make this, or no context\ncurrent. It could also keep the previous context current. What happens\nvaries by platform and error.</p>\n<p>To attempt to recover and get back into a know state, either:</p>\n<ul>\n<li>attempt to use <a href=\"glutin/struct.ContextWrapper.html#method.is_current\" title=\"method glutin::ContextWrapper::is_current\"><code>is_current()</code></a> to find the new current context; or</li>\n<li>call <a href=\"glutin/struct.ContextWrapper.html#method.make_not_current\" title=\"method glutin::ContextWrapper::make_not_current\"><code>make_not_current()</code></a> on both the previously current context\nand this context.</li>\n</ul>\n<h5 id=\"a-higher-level-overview\"><a class=\"doc-anchor\" href=\"#a-higher-level-overview\">§</a>A higher level overview.</h5>\n<p>In OpenGl, only a single context can be current in a thread at a time.\nMaking a new context current will make the old one not current.\nContexts can only be sent to different threads if they are not current.</p>\n<p>If you call <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> on some context, you\nshould call <a href=\"glutin/struct.ContextWrapper.html#method.treat_as_not_current\" title=\"method glutin::ContextWrapper::treat_as_not_current\"><code>treat_as_not_current()</code></a> as soon as\npossible on the previously current context.</p>\n<p>If you wish to move a currently current context to a different thread,\nyou should do one of two options:</p>\n<ul>\n<li>Call <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> on another context, then call\n<a href=\"glutin/struct.ContextWrapper.html#method.treat_as_not_current\" title=\"method glutin::ContextWrapper::treat_as_not_current\"><code>treat_as_not_current()</code></a> on this context.</li>\n<li>Call <a href=\"glutin/struct.ContextWrapper.html#method.make_not_current\" title=\"method glutin::ContextWrapper::make_not_current\"><code>make_not_current()</code></a> on this context.</li>\n</ul>\n<p>If you are aware of what context you intend to make current next, it is\npreferable for performance reasons to call <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> on that\ncontext, then call <a href=\"glutin/struct.ContextWrapper.html#method.treat_as_not_current\" title=\"method glutin::ContextWrapper::treat_as_not_current\"><code>treat_as_not_current()</code></a> on this context.</p>\n<p>If you are not aware of what context you intend to make current next,\nconsider waiting until you do. If you need this context not current\nimmediately (e.g. to transfer it to another thread), then call\n<a href=\"glutin/struct.ContextWrapper.html#method.make_not_current\" title=\"method glutin::ContextWrapper::make_not_current\"><code>make_not_current()</code></a> on this context.</p>\n<p>Please avoid calling <a href=\"glutin/struct.ContextWrapper.html#method.make_not_current\" title=\"method glutin::ContextWrapper::make_not_current\"><code>make_not_current()</code></a> on one context only to call\n<a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> on another context before and/or after. This hurts\nperformance by requiring glutin to:</p>\n<ul>\n<li>Check if this context is current; then</li>\n<li>If it is, change the current context from this context to none; then</li>\n<li>Change the current context from none to the new context.</li>\n</ul>\n<p>Instead prefer the method we mentioned above with <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> and\n<a href=\"glutin/struct.ContextWrapper.html#method.treat_as_not_current\" title=\"method glutin::ContextWrapper::treat_as_not_current\"><code>treat_as_not_current()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_not_current\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#241-249\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.make_not_current\" class=\"fn\">make_not_current</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"enum\" href=\"glutin/enum.NotCurrent.html\" title=\"enum glutin::NotCurrent\">NotCurrent</a>, W&gt;, (Self, <a class=\"enum\" href=\"glutin/enum.ContextError.html\" title=\"enum glutin::ContextError\">ContextError</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>If this context is current, makes this context not current. If this\ncontext is not current however, this function does nothing.</p>\n<p>Please see <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.treat_as_not_current\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#259-261\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.treat_as_not_current\" class=\"fn\">treat_as_not_current</a>(self) -&gt; <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"enum\" href=\"glutin/enum.NotCurrent.html\" title=\"enum glutin::NotCurrent\">NotCurrent</a>, W&gt;</h4></section></summary><div class=\"docblock\"><p>Treats this context as not current, even if it is current. We do no\nchecks to confirm that this is actually case.</p>\n<p>If unsure whether or not this context is current, please use\n<a href=\"glutin/struct.ContextWrapper.html#method.make_not_current\" title=\"method glutin::ContextWrapper::make_not_current\"><code>make_not_current()</code></a> which will do nothing if this\ncontext is not current.</p>\n<p>Please see <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.treat_as_current\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#272-274\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.treat_as_current\" class=\"fn\">treat_as_current</a>(self) -&gt; <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;<a class=\"struct\" href=\"glutin/struct.PossiblyCurrent.html\" title=\"struct glutin::PossiblyCurrent\">PossiblyCurrent</a>, W&gt;</h4></section></summary><div class=\"docblock\"><p>Treats this context as current, even if it is not current. We do no\nchecks to confirm that this is actually case.</p>\n<p>This function should only be used if you intend to track context\ncurrency without the limited aid of glutin, and you wish to store\nall the <a href=\"glutin/struct.Context.html\" title=\"struct glutin::Context\"><code>Context</code></a>s as <a href=\"glutin/enum.NotCurrent.html\" title=\"enum glutin::NotCurrent\"><code>NotCurrent</code></a>.</p>\n<p>Please see <a href=\"glutin/struct.ContextWrapper.html#method.make_current\" title=\"method glutin::ContextWrapper::make_current\"><code>make_current()</code></a> for the preferred method\nof handling context currency.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_current\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#277-279\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.is_current\" class=\"fn\">is_current</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this context is the current one in this thread.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_api\" class=\"method\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#282-284\">source</a><h4 class=\"code-header\">pub fn <a href=\"glutin/struct.ContextWrapper.html#tymethod.get_api\" class=\"fn\">get_api</a>(&amp;self) -&gt; <a class=\"enum\" href=\"glutin/enum.Api.html\" title=\"enum glutin::Api\">Api</a></h4></section></summary><div class=\"docblock\"><p>Returns the OpenGL API being used.</p>\n</div></details></div></details>",0,"glutin::windowed::WindowedContext","glutin::windowed::RawContext"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ContextWrapper%3CT,+W%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#81\">source</a><a href=\"#impl-Debug-for-ContextWrapper%3CT,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"glutin/trait.ContextCurrentState.html\" title=\"trait glutin::ContextCurrentState\">ContextCurrentState</a>, W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;T, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#81\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","glutin::windowed::WindowedContext","glutin::windowed::RawContext"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-ContextWrapper%3CT,+W%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#295-300\">source</a><a href=\"#impl-Deref-for-ContextWrapper%3CT,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"glutin/trait.ContextCurrentState.html\" title=\"trait glutin::ContextCurrentState\">ContextCurrentState</a>, W&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"glutin/struct.ContextWrapper.html\" title=\"struct glutin::ContextWrapper\">ContextWrapper</a>&lt;T, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"glutin/struct.Context.html\" title=\"struct glutin::Context\">Context</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/glutin/windowed.rs.html#297-299\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","glutin::windowed::WindowedContext","glutin::windowed::RawContext"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()